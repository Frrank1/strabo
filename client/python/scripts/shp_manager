#!/usr/bin/env python

#
# Copyright 2015 Google, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

from strabo.connection import StraboConnection

from prettytable import PrettyTable
import re
import sys
import requests

__usage__ = """
Valid commands:

ls
    Lists all available shapefiles.

install [shapefile_name]

    Installs the shapefile with name "shapefile_name".

uninstall [shapefile_name]

    Uninstalls the shapefile with name "shapefile_name".

quit|exit|q

    Exits.

help|h

    Prints this message."""

print __usage__

def quit(match_result):
    sys.exit(0)

def list_shapefiles(match_result):
    connection = StraboConnection()
    response = requests.get(connection.strabo_url + "/admin/shapefiles")
    response.raise_for_status()
    response_json = response.json()

    pt = PrettyTable()
    pt.field_names = ['Name', 'Description', 'Status']
    for row in response_json["result"]:
        pt.add_row([row['name'], row['description'], row['status']])
    print pt

def install_shapefile(match_result):
    connection = StraboConnection()
    response = requests.post(connection.strabo_url + '/admin/shapefiles/install',
                             json={'name': match_result.group(1)})
    response.raise_for_status()
    response_json = response.json()

    print response_json

def uninstall_shapefile(match_result):
    connection = StraboConnection()
    response = requests.post(connection.strabo_url + '/admin/shapefiles/uninstall',
                             json={'name': match_result.group(1)})
    response.raise_for_status()
    response_json = response.json()

    print response_json

def show_help(match_result):
    print __usage__

parses = [("ls", list_shapefiles),
          ("install (.*)", install_shapefile),
          ("uninstall (.*)", uninstall_shapefile),
          ("(q|quit|exit)$", quit),
          ("(help|h)$", show_help)]

while True:
    user_input = raw_input('> ').strip()
    correct = False
    for matcher, callback in parses:
        match = re.match(matcher, user_input)
        if match is not None:
            correct = True
            callback(match)
            break
    if not correct:
        print "Input not recognized. Type 'help' for help."
